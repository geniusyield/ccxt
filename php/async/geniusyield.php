<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\async\abstract\geniusyield as Exchange;
use React\Async;
use React\Promise\PromiseInterface;

class geniusyield extends Exchange {

    public function safe_market(?string $marketId = null, ?array $market = null, ?string $delimiter = null, ?string $marketType = null): array {
        $isOption = ($marketId !== null) && ((mb_strpos($marketId, '-C') > -1) || (mb_strpos($marketId, '-P') > -1));
        if ($isOption && !(is_array($this->markets_by_id) && array_key_exists($marketId, $this->markets_by_id))) {
            // handle expired option contracts
            return $this->create_expired_option_market($marketId);
        }
        return parent::safe_market($marketId, $market, $delimiter, $marketType);
    }

    public function describe() {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'geniusyield',
            'name' => 'Genius Yield',
            'countries' => array( 'CH' ),
            'rateLimit' => 1000,
            'version' => 'v0',
            'pro' => false,
            'dex' => true,
            'certified' => false,
            'requiresWeb3' => true,
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => false,
                'swap' => false,
                'future' => false,
                'option' => false,
                'addMargin' => false,
                'cancelAllOrders' => false,
                'cancelOrder' => false,
                'cancelOrders' => false,
                'closeAllPositions' => false,
                'closePosition' => false,
                'createDepositAddress' => false,
                'createOrder' => false,
                'createReduceOnlyOrder' => false,
                'createStopLimitOrder' => false,
                'createStopMarketOrder' => false,
                'createStopOrder' => false,
                'fetchBalance' => true,
                'fetchBorrowRateHistories' => false,
                'fetchBorrowRateHistory' => false,
                'fetchClosedOrders' => false,
                'fetchCrossBorrowRate' => false,
                'fetchCrossBorrowRates' => false,
                'fetchCurrencies' => false,
                'fetchDeposit' => false,
                'fetchDepositAddress' => false,
                'fetchDepositAddresses' => false,
                'fetchDepositAddressesByNetwork' => false,
                'fetchDeposits' => false,
                'fetchFundingHistory' => false,
                'fetchFundingRate' => false,
                'fetchFundingRateHistory' => false,
                'fetchFundingRates' => false,
                'fetchIndexOHLCV' => false,
                'fetchIsolatedBorrowRate' => false,
                'fetchIsolatedBorrowRates' => false,
                'fetchLeverage' => false,
                'fetchLeverageTiers' => false,
                'fetchMarginMode' => false,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => false,
                'fetchMyTrades' => false,
                'fetchOHLCV' => false,
                'fetchOpenInterestHistory' => false,
                'fetchOpenOrders' => false,
                'fetchOrder' => false,
                'fetchOrderBook' => false,
                'fetchOrders' => false,
                'fetchPosition' => false,
                'fetchPositionHistory' => false,
                'fetchPositionMode' => false,
                'fetchPositions' => false,
                'fetchPositionsForSymbol' => false,
                'fetchPositionsHistory' => false,
                'fetchPositionsRisk' => false,
                'fetchPremiumIndexOHLCV' => false,
                'fetchStatus' => false,
                'fetchTicker' => false,
                'fetchTickers' => false,
                'fetchTime' => false,
                'fetchTrades' => false,
                'fetchTradingFee' => false,
                'fetchTradingFees' => false,
                'fetchTransactions' => false,
                'fetchWithdrawal' => false,
                'fetchWithdrawals' => false,
                'reduceMargin' => false,
                'sandbox' => false,
                'setLeverage' => false,
                'setMarginMode' => false,
                'setPositionMode' => false,
                'transfer' => false,
                'withdraw' => false,
            ),
            'timeframes' => array(
                '1m' => '1m',
                '5m' => '5m',
                '15m' => '15m',
                '30m' => '30m',
                '1h' => '1h',
                '6h' => '6h',
                '1d' => '1d',
            ),
            'urls' => array(
                'api' => array(
                    'preprod' => 'http://localhost:8082',
                    'mainnet' => 'http://localhost:8082',
                ),
                'www' => 'https://www.geniusyield.co/',
                'doc' => array(
                    'https://github.com/geniusyield/dex-contracts-api?tab=readme-ov-file#geniusyield-dex',
                ),
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                    ),
                ),
                'private' => array(
                    'get' => array(
                        'balances/{address}' => 10,
                        'markets' => 10,
                        'trading-fees' => 10,
                        'settings' => 10,
                    ),
                ),
            ),
            'headers' => array(
                'X-Gate-Channel-Id' => 'ccxt',
            ),
            'options' => array(
                'defaultTimeInForce' => 'utc',
                'defaultSelfTradePrevention' => 'cn',
                'network' => 'mainnet',
            ),
            'exceptions' => array(
                'exact' => array(
                    'INVALID_ORDER_QUANTITY' => '\\ccxt\\InvalidOrder',
                    'INSUFFICIENT_FUNDS' => '\\ccxt\\InsufficientFunds',
                    'SERVICE_UNAVAILABLE' => '\\ccxt\\ExchangeNotAvailable',
                    'EXCEEDED_RATE_LIMIT' => '\\ccxt\\DDoSProtection',
                    'INVALID_PARAMETER' => '\\ccxt\\BadRequest',
                    'WALLET_NOT_ASSOCIATED' => '\\ccxt\\InvalidAddress',
                    'INVALID_WALLET_SIGNATURE' => '\\ccxt\\AuthenticationError',
                ),
            ),
            'requiredCredentials' => array(
                'walletAddress' => false,
                'privateKey' => false,
                'apiKey' => true,
                'secret' => false,
            ),
            'precisionMode' => TICK_SIZE,
            'paddingMode' => PAD_WITH_ZERO,
            'commonCurrencies' => array(),
        ));
    }

    public function fetch_markets($params = array ()): PromiseInterface {
        return Async\async(function () use ($params) {
            $this->check_required_credentials();
            /**
             * retrieves data on all $markets for geniusyield
             * @see https://api-docs-v3.geniusyield.io/#get-$markets
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} an array of objects representing market data
             */
            $markets = Async\await($this->privateGetMarkets ($params));
            // array(
            //    {
            //      "market_id" => "lovelace_dda5fdb1002f7389b33e036b6afee82a8189becb6cba852e8b79b4fb.0014df1047454e53",
            //      "base_asset" => "lovelace",
            //      "target_asset" => "dda5fdb1002f7389b33e036b6afee82a8189becb6cba852e8b79b4fb.0014df1047454e53"
            //    }
            // )
            $fees = Async\await($this->privateGetTradingFees ());
            // {
            //   "flat_maker_fee" => "1000000",
            //   "flat_taker_fee" => "1000000",
            //   "percentage_maker_fee" => "0.3",
            //   "percentage_taker_fee" => "0.3"
            // }
            $maker = $this->safe_number($fees, 'percentage_maker_fee');
            $taker = $this->safe_number($fees, 'percentage_taker_fee');
            $result = array();
            for ($i = 0; $i < count($markets); $i++) {
                $entry = $markets[$i];
                $marketId = $this->safe_string($entry, 'market_id');
                $baseId = $this->safe_string($entry, 'base_asset');
                $quoteId = $this->safe_string($entry, 'target_asset');
                $base = $this->safe_currency_code($baseId);
                $quote = $this->safe_currency_code($quoteId);
                $result[] = array(
                    'id' => $marketId,
                    'symbol' => $marketId,
                    'base' => $base,
                    'quote' => $quote,
                    'settle' => null,
                    'baseId' => $baseId,
                    'quoteId' => $quoteId,
                    'settleId' => null,
                    'type' => 'spot',
                    'spot' => true,
                    'margin' => false,
                    'swap' => false,
                    'future' => false,
                    'option' => false,
                    'active' => true,
                    'contract' => false,
                    'linear' => null,
                    'inverse' => null,
                    'taker' => $taker,
                    'maker' => $maker,
                    'contractSize' => null,
                    'expiry' => null,
                    'expiryDatetime' => null,
                    'strike' => null,
                    'optionType' => null,
                    'precision' => array(
                        'amount' => null,
                        'price' => null,
                    ),
                    'limits' => array(
                        'leverage' => array(
                            'min' => null,
                            'max' => null,
                        ),
                        'amount' => array(
                            'min' => null,
                            'max' => null,
                        ),
                        'price' => array(
                            'min' => null,
                            'max' => null,
                        ),
                        'cost' => array(
                            'min' => null,
                            'max' => null,
                        ),
                    ),
                    'created' => null,
                    'info' => $entry,
                );
            }
            return $result;
        }) ();
    }

    public function parse_balance($response): array {
        $result = array(
            'info' => $response,
            'timestamp' => null,
            'datetime' => null,
        );
        for ($i = 0; $i < count($response); $i++) {
            $entry = $response[$i];
            $currencyId = $this->safe_string($entry, 'asset');
            $code = $this->safe_currency_code($currencyId);
            $account = $this->account();
            $account['total'] = $this->safe_string($entry, 'quantity');
            $account['free'] = $this->safe_string($entry, 'availableForTrade');
            $account['used'] = $this->safe_string($entry, 'locked');
            $result[$code] = $account;
        }
        return $this->safe_balance($result);
    }

    public function fetch_balance($params = array ()): PromiseInterface {
        return Async\async(function () use ($params) {
            $settings = Async\await($this->privateGetSettings ($params));
            $address = $this->safe_string($settings, 'address');
            $request = array(
                'address' => $address,
            );
            $balances = Async\await($this->privateGetBalancesAddress ($this->extend($request, $params)));
            return $this->safe_balance($balances);
        }) ();
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $this->check_required_credentials();
        $network = $this->safe_string($this->options, 'network', 'mainnet');
        $version = $this->safe_string($this->options, 'version', 'v0');
        $url = $this->urls['api'][$network] . '/' . $version . '/' . $this->implode_params($path, $params);
        $headers = array(
            'Content-Type' => 'application/json',
        );
        if ($this->apiKey !== null) {
            $headers['api-key'] = $this->apiKey;
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }
}
